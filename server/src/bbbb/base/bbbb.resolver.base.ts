/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateBbbbArgs } from "./CreateBbbbArgs";
import { UpdateBbbbArgs } from "./UpdateBbbbArgs";
import { DeleteBbbbArgs } from "./DeleteBbbbArgs";
import { BbbbFindManyArgs } from "./BbbbFindManyArgs";
import { BbbbFindUniqueArgs } from "./BbbbFindUniqueArgs";
import { Bbbb } from "./Bbbb";
import { BbbbService } from "../bbbb.service";

@graphql.Resolver(() => Bbbb)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class BbbbResolverBase {
  constructor(
    protected readonly service: BbbbService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Bbbb",
    action: "read",
    possession: "any",
  })
  async _bbbbsMeta(
    @graphql.Args() args: BbbbFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Bbbb])
  @nestAccessControl.UseRoles({
    resource: "Bbbb",
    action: "read",
    possession: "any",
  })
  async bbbbs(@graphql.Args() args: BbbbFindManyArgs): Promise<Bbbb[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Bbbb, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Bbbb",
    action: "read",
    possession: "own",
  })
  async bbbb(@graphql.Args() args: BbbbFindUniqueArgs): Promise<Bbbb | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bbbb)
  @nestAccessControl.UseRoles({
    resource: "Bbbb",
    action: "create",
    possession: "any",
  })
  async createBbbb(@graphql.Args() args: CreateBbbbArgs): Promise<Bbbb> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bbbb)
  @nestAccessControl.UseRoles({
    resource: "Bbbb",
    action: "update",
    possession: "any",
  })
  async updateBbbb(@graphql.Args() args: UpdateBbbbArgs): Promise<Bbbb | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bbbb)
  @nestAccessControl.UseRoles({
    resource: "Bbbb",
    action: "delete",
    possession: "any",
  })
  async deleteBbbb(@graphql.Args() args: DeleteBbbbArgs): Promise<Bbbb | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
